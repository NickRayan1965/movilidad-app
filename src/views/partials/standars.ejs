<div id="loader-overlay" aria-hidden="true" class="d-none">
  <div class="loader-box" role="status" aria-live="polite">
    <div class="spinner"></div>
    <div class="loader-text fw-semibold">Cargando...</div>
  </div>
</div>
<style>
  :root{--theme:#16a085;}
  .hidden{display:none;}
  #loader-overlay{
    position:fixed;
    inset:0; /* top:0;right:0;bottom:0;left:0; */
    background:rgba(0,0,0,0.35); /* semitransparente */
    display:flex;
    align-items:center;
    justify-content:center;
    z-index:9999;
    pointer-events:auto;
  }
  .loader-box{
    display:flex;
    flex-direction:column;
    gap:.6rem;
    align-items:center;
    justify-content:center;
    padding:1rem 1.2rem;
    border-radius:12px;
    background:rgba(255,255,255,0.06);
    backdrop-filter: blur(4px);
  }
  .spinner{
    width:100px;
    height:100px;
    border:15px solid rgba(0,0,0,0.08);
    border-top-color:var(--theme);
    border-radius:50%;
    animation:spin 0.85s linear infinite;
    box-sizing:border-box;
  }
  .loader-text{
    font-family:system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;
    font-size:3rem;
    color:#fff;
    opacity:.95;
    text-align:center;
  }
  @keyframes spin{to{transform:rotate(360deg)}}
</style>
<script>
  const _loader = document.getElementById('loader-overlay');
  const _bodyOverflow = () => document.documentElement.style.overflow;
  function loading({blockScroll = true} = {}) {
    if (!_loader) return;
    _loader.classList.remove('d-none');
    if (blockScroll) {
      document.documentElement.style.overflow = 'hidden';
      document.body.style.touchAction = 'none';
    }
  }

  function stopLoading() {
    if (!_loader) return;
    _loader.classList.add('d-none');
    document.documentElement.style.overflow = '';
    document.body.style.touchAction = '';
  }
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function postData(url = "", data = {}) {
    const res = await fetch(url, {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      },
      body: JSON.stringify(data)
    });
    if (res.status === 401) {
      localStorage.removeItem("token");   // limpia token
      localStorage.removeItem("user");
      if (window.location.pathname !== "/auth/login") {
        window.location.href = "/auth/login";
      }
      throw new Error(`Error ${res.status}`);
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  async function getData(url = "", params = {}) {
    const query = new URLSearchParams(params).toString();
    const fullUrl = query ? `${url}?${query}` : url;

    const res = await fetch(fullUrl, {
      method: "GET",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      }
    });
    if (res.status === 401) {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      if (window.location.pathname !== "/auth/login") {
        window.location.href = "/auth/login";
      }
      throw new Error(`Error ${res.status}`);
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }

  async function putData(url = "", data = {}) {
    const res = await fetch(url, {
      method: "PUT",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      },
      body: JSON.stringify(data)
    });
    if (res.status === 401) {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      if (window.location.pathname !== "/auth/login") {
        window.location.href = "/auth/login";
      }
      throw new Error(`Error ${res.status}`);
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  async function deleteData(url = "") {
    const res = await fetch(url, {
      method: "DELETE",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      }
    });
    if (res.status === 401) {
      localStorage.removeItem("token");
      localStorage.removeItem("user");
      if (window.location.pathname !== "/auth/login") {
        window.location.href = "/auth/login";
      }
      throw new Error(`Error ${res.status}`);
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  function warningNotification({title = 'Advertencia', message}) {
    toastr.warning(message, title, {
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right",
      timeOut: "5000"
    });
  }
  function normalizeDecimal({
    value,
    decimals,
    defaultValue
  }) {
    try {
      const num = new Decimal(value);
      return num.toFixed(decimals);
    } catch {
      return defaultValue;
    }
  }

  function modal(id) {
    const modalElement = document.getElementById(id);
    let modalInstance = bootstrap.Modal.getInstance(modalElement);

    if (!modalInstance) {
      modalInstance = new bootstrap.Modal(modalElement);
    }
    return modalInstance;
  }

  function attachNumericHandlers() {
    // limpiar eventos previos
    $('.numeric').off('.numeric');

    // restringir caracteres permitidos
    $('.numeric').on('input.numeric', function () {
      let val = $(this).val();
      // solo números y un punto
      val = val.replace(/[^0-9.]/g, '');     
      // si hay más de un punto, deja solo el primero
      const parts = val.split('.');
      if (parts.length > 2) {
        val = parts[0] + '.' + parts.slice(1).join('').replace(/\./g, '');
      }
      $(this).val(val);
    });

    // normalizar al salir
    $('.numeric').on('blur.numeric', function () {
      const e = $(this);
      const maxDecimalPlaces = e.attr('max-decimals') ? +e.attr('max-decimals') : 2;
      const defaultOnFail = '';
      const value = e.val();

      e.val(
        normalizeDecimal({
          value,
          decimals: maxDecimalPlaces,
          defaultValue: defaultOnFail
        })
      );
    });
  }

  function attachIntegerHandlers() {
    // limpiar eventos previos
    $('.integer').off('.integer');

    // restringir solo números
    $('.integer').on('input.integer', function () {
      let val = $(this).val();
      val = val.replace(/[^0-9]/g, ''); // elimina todo lo que no sea dígito
      $(this).val(val);
    });
  }

  async function verifySession() {
    if (window.location.pathname === '/auth/login') return;
    const token = localStorage.getItem('token');
    if(token) return;
    try {
      await getData('/verify-token');
    } catch (error) {
      window.location.href = '/auth/login';
    }
  }

  function welcomeHandler() {
    const userString = localStorage.getItem('user');
    if(!userString || userString === 'undefined' || userString === 'null') {
      $('#welcome-banner').addClass('d-none');
      $('#log-out-btn').addClass('d-none');
      return;
    };
    const user = JSON.parse(userString);
    $('#welcome-banner').removeClass('d-none').text(`Bienvenido ${user.NOMBRE_COMPLETO}`);
    $('#log-out-btn').removeClass('d-none');
  }
  function logOut() {
    localStorage.removeItem('user');
    localStorage.removeItem('token');
    window.location.href = "/auth/login";
  }
  $(async function() {
    $(".modal-dialog").draggable({
      handle: ".modal-header"
    });
    $(document).on('show.bs.modal', function (e) {
      const $dialog = $(e.target).find(".modal-dialog");
      $dialog.css({
        top: "",
        left: "",
        position: ""
      });
    });
    await verifySession();
    attachNumericHandlers();
    attachIntegerHandlers();
    welcomeHandler();
  });
</script>