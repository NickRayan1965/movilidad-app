<div id="globalLoading" aria-hidden="true" role="status">
  <div class="gl-backdrop"></div>
  <div class="gl-center" aria-live="polite">
    <div class="spinner-border" role="status" style="width:3rem;height:3rem;">
      <span class="visually-hidden">Cargando...</span>
    </div>
    <div id="gl-text" class="mt-2 text-white">Cargando...</div>
  </div>
</div>
<style>
  #globalLoading{display:none;position:fixed;inset:0;z-index:2147483646;pointer-events:none;}
  #globalLoading[aria-hidden="false"]{display:flex;pointer-events:auto;align-items:center;justify-content:center;}
  #globalLoading .gl-backdrop{position:absolute;inset:0;background:rgba(0,0,0,0.55);backdrop-filter:blur(1px);}
  #globalLoading .gl-center{position:relative;z-index:2;display:flex;flex-direction:column;align-items:center;justify-content:center;}
  #gl-text{color:#fff;font-size:.95rem;}
</style>
<script>
  (function(){
    window._gl_count = 0;
    window._gl_prevOverflow = null;
    window.loading = function(text){
      const el = document.getElementById('globalLoading');
      if(text) document.getElementById('gl-text').textContent = text;
      window._gl_count = (window._gl_count || 0) + 1;
      if(window._gl_count === 1){
        window._gl_prevOverflow = document.body.style.overflow;
        document.body.style.overflow = 'hidden';
        el.setAttribute('aria-hidden','false');
      }
    };
    window.stopLoading = function(force=false){
      const el = document.getElementById('globalLoading');
      if(force){
        window._gl_count = 0;
      } else {
        window._gl_count = Math.max(0, (window._gl_count || 0) - 1);
      }
      if(window._gl_count === 0){
        el.setAttribute('aria-hidden','true');
        document.body.style.overflow = window._gl_prevOverflow || '';
      }
    };
    // opcional: reset por si algo falla
    window.resetLoading = function(){ window.hideLoading(true); };
  })();
  function sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  async function postData(url = "", data = {}) {
    const res = await fetch(url, {
      method: "POST",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      },
      body: JSON.stringify(data)
    });
    if (res.status === 401) {
      localStorage.removeItem("token");   // limpia token
      window.location.href = "/auth/login";    // redirige
      return; // corta la ejecución
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
      return;
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  async function getData(url = "", params = {}) {
    const query = new URLSearchParams(params).toString();
    const fullUrl = query ? `${url}?${query}` : url;

    const res = await fetch(fullUrl, {
      method: "GET",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      }
    });
    console.log({res});
    if (res.status === 401) {
      localStorage.removeItem("token");
      window.location.href = "/auth/login";
      return;
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
      return;
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }

  async function putData(url = "", data = {}) {
    const res = await fetch(url, {
      method: "PUT",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      },
      body: JSON.stringify(data)
    });
    if (res.status === 401) {
      localStorage.removeItem("token");
      window.location.href = "/auth/login";
      return;
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
      return;
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  async function deleteData(url = "") {
    const res = await fetch(url, {
      method: "DELETE",
      headers: { 
        "Content-Type": "application/json",
        "Authorization": "Bearer " + localStorage.getItem("token")
      }
    });
    if (res.status === 401) {
      localStorage.removeItem("token");
      window.location.href = "/auth/login";
      return;
    }
    if (res.status === 500) {
      toastr.error("Ocurrió un error en el servidor");
      throw new Error(`Error ${res.status}`);
      return;
    }
    if (!res.ok) throw new Error(`Error ${res.status}`);
    return res.json();
  }
  function warningNotification({title = 'Advertencia', message}) {
    toastr.warning(message, title, {
      closeButton: true,
      progressBar: true,
      positionClass: "toast-top-right",
      timeOut: "5000"
    });
  }
  function normalizeDecimal({
    value,
    decimals,
    defaultValue
  }) {
    try {
      const num = new Decimal(value);
      return num.toFixed(decimals);
    } catch {
      return defaultValue;
    }
  }

  function modal(id) {
    const modalElement = document.getElementById(id);
    let modalInstance = bootstrap.Modal.getInstance(modalElement);

    if (!modalInstance) {
      modalInstance = new bootstrap.Modal(modalElement);
    }
    return modalInstance;
  }

  function attachNumericHandlers() {
    // limpiar eventos previos
    $('.numeric').off('.numeric');

    // restringir caracteres permitidos
    $('.numeric').on('input.numeric', function () {
      let val = $(this).val();
      // solo números y un punto
      val = val.replace(/[^0-9.]/g, '');     
      // si hay más de un punto, deja solo el primero
      const parts = val.split('.');
      if (parts.length > 2) {
        val = parts[0] + '.' + parts.slice(1).join('').replace(/\./g, '');
      }
      $(this).val(val);
    });

    // normalizar al salir
    $('.numeric').on('blur.numeric', function () {
      const e = $(this);
      const maxDecimalPlaces = e.attr('max-decimals') ? +e.attr('max-decimals') : 2;
      const defaultOnFail = '';
      const value = e.val();

      e.val(
        normalizeDecimal({
          value,
          decimals: maxDecimalPlaces,
          defaultValue: defaultOnFail
        })
      );
    });
  }

  function attachIntegerHandlers() {
    // limpiar eventos previos
    $('.integer').off('.integer');

    // restringir solo números
    $('.integer').on('input.integer', function () {
      let val = $(this).val();
      val = val.replace(/[^0-9]/g, ''); // elimina todo lo que no sea dígito
      $(this).val(val);
    });
  }


  $(function() {
    $(".modal-dialog").draggable({
      handle: ".modal-header"
    });
    $(document).on('show.bs.modal', function (e) {
      const $dialog = $(e.target).find(".modal-dialog");
      $dialog.css({
        top: "",
        left: "",
        position: ""
      });
    });
    attachNumericHandlers();
    attachIntegerHandlers();
  });
</script>